package compilador.src.compilador;

public interface ParserConstants
{
    int START_SYMBOL = 35;

    int FIRST_NON_TERMINAL    = 35;
    int FIRST_SEMANTIC_ACTION = 62;

    int[][] PARSER_TABLE =
    {
        { -1, 20, -1, -1, -1, -1, 20, -1, -1, -1, -1, -1, -1, 20, -1, 20, 20, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { 22, 21, -1, -1, -1, -1, 21, -1, 22, 22, -1, -1, -1, 21, -1, 21, 21, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1,  6,  6,  6,  6,  6, -1, -1, -1, -1,  6,  6, -1, -1,  6, -1, -1, -1, -1, -1, -1, -1,  6, -1, -1, -1, -1, -1, -1, -1,  6,  6, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  7, -1, -1, -1, -1,  8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 15, -1, -1, -1, -1, 19, -1, -1, -1, -1, -1, -1, 16, -1, 17, 17, 18, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 23, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 24, -1, 25, -1, -1, 25, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1,  0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  2, -1,  1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  4,  5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,  9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, 10, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 26, 26, 26, 26, 26, -1, -1, -1, -1, 26, 26, -1, -1, 26, -1, -1, -1, -1, -1, -1, -1, 26, -1, -1, -1, -1, -1, -1, -1, 26, 26, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, 28, -1, -1, -1, -1, 29, -1, -1, -1, -1, -1, 27, 27, -1, 27, -1, 27, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1 },
        { -1, 30, 30, 30, 30, 30, -1, -1, -1, -1, 32, 33, -1, -1, 31, -1, -1, -1, -1, -1, -1, -1, 30, -1, -1, -1, -1, -1, -1, -1, 30, 30, -1, -1 },
        { -1, 34, 34, 34, 34, 34, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 34, -1, -1, -1, -1, -1, -1, -1, 34, 34, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, 35, -1, -1, -1, -1, 35, -1, -1, -1, -1, -1, 35, 35, -1, 35, -1, 35, 36, 36, 36, 36, 36, 36, -1, -1, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 37, 38, 39, 40, 41, 42, -1, -1, -1, -1 },
        { -1, 43, 43, 43, 43, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 43, -1, -1, -1, -1, -1, -1, -1, 43, 43, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, 44, -1, -1, -1, -1, 44, -1, -1, -1, -1, -1, 44, 44, -1, 44, -1, 44, 44, 44, 44, 44, 44, 44, 45, 46, -1, -1 },
        { -1, 47, 47, 47, 47, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, -1, -1, -1, -1, -1, -1, -1, 47, 47, -1, -1 },
        { -1, -1, -1, -1, -1, -1, -1, 48, -1, -1, -1, -1, 48, -1, -1, -1, -1, -1, 48, 48, -1, 48, -1, 48, 48, 48, 48, 48, 48, 48, 48, 48, 49, 50 },
        { -1, 51, 52, 53, 54, 55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 56, -1, -1, -1, -1, -1, -1, -1, 57, 58, -1, -1 }
    };

    int[][] PRODUCTIONS = 
    {
        { 40, 21, 51, 43 },
        { 22, 18, 51 },
        {  0 },
        { 14, 23, 40, 24 },
        { 16, 23, 37, 24 },
        { 17, 23, 37, 24 },
        { 51, 38 },
        { 19, 37 },
        {  0 },
        { 18, 23, 51, 24, 35, 48, 10 },
        {  9, 35 },
        {  0 },
        {  7, 23, 51, 24, 22, 18, 50, 35, 10 },
        { 15 },
        { 11 },
        { 42 },
        { 44 },
        { 45 },
        { 47 },
        { 49 },
        { 39, 20, 36 },
        { 35 },
        {  0 },
        {  2, 41 },
        { 19, 40 },
        {  0 },
        { 53, 52 },
        {  0 },
        {  8, 53, 52 },
        { 13, 53, 52 },
        { 54 },
        { 15 },
        { 11 },
        { 12, 53 },
        { 57, 55 },
        {  0 },
        { 56, 57 },
        { 25 },
        { 26 },
        { 27 },
        { 28 },
        { 29 },
        { 30 },
        { 59, 58 },
        {  0 },
        { 31, 59, 58 },
        { 32, 59, 58 },
        { 61, 60 },
        {  0 },
        { 33, 61, 60 },
        { 34, 61, 60 },
        {  2 },
        {  3 },
        {  4 },
        {  5 },
        {  6 },
        { 23, 51, 24 },
        { 31, 61 },
        { 32, 61 }
    };

    String[] PARSER_ERROR =
    {
        "",
        "esperado: EOF",
        "esperado: identificador",
        "esperado: constante_int",
        "esperado: constante_float",
        "esperado: constante_binaria",
        "esperado: constante_string",
        "esperado: pr_check",
        "esperado: pr_and",
        "esperado: pr_else",
        "esperado: pr_end",
        "esperado: pr_false",
        "esperado: pr_not",
        "esperado: pr_or",
        "esperado: pr_read",
        "esperado: pr_true",
        "esperado: pr_write",
        "esperado: pr_writeln",
        "esperado: pr_if",
        "esperado: \",\"",
        "esperado: \";\"",
        "esperado: \"=\"",
        "esperado: \":\"",
        "esperado: \"(\"",
        "esperado: \")\"",
        "esperado: \"==\"",
        "esperado: \"!=\"",
        "esperado: \"<\"",
        "esperado: \"<=\"",
        "esperado: \">\"",
        "esperado: \">=\"",
        "esperado: \"+\"",
        "esperado: \"-\"",
        "esperado: \"*\"",
        "esperado: \"/\"",
        "esperado: identificador check read write writeln if", //"<lista_comandos> inv�lido",
        "esperado: identificador check read write writeln if", //"<lista_comandos1> inv�lido",
        "esperado: expressao identificador int float binaria string false not true ( + -", //<lista_expressao> inv�lido",
        "<lista_expressao1> inválido",
        "esperado identificador ", //"<comando> inv�lido",
        "<lista_id> inválido",
        "<lista_id1> inválido",
        "<atribuicao> inválido",
        "<atribuicao1> inválido",
        "<entrada_dados> inválido",
        "<saida_dados> inválido",
        "<saida_dados1> inválido",
        "<selecao> inválido",
        "<selecao1> inválido",
        "<repeticao> inválido",
        "<repeticao1> inválido",
        "esperado: identificador int float binaria string false not true ( + -", //"<expressao> inv�lido",
        "<expressao_> inválido",
        "esperado: identificador int float binaria string ( + -", //"<elemento> inv�lido",
        "esperado: identificador int float binaria string ( + -", //"<relacional> inv�lido",
        "<relacional_> inválido",
        "<operador_relacional> inválido",
        "Era esperado identificador int float binaria string ( + -", //"<aritmetica> inv�lido",
        "<aritmetica_> inválido",
        "esperado: identificador int float binaria string ( + -", //"<termo> inv�lido",
        "<termo_> inválido",
        "<fator> inválido"
    };
}
